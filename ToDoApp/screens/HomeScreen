// HomeScreen.js - Main screen with task list and form
import React, { useEffect, useState } from 'react';
import { View, FlatList, StyleSheet } from 'react-native';
import { TextInput, Button, Text, RadioButton, Menu, Divider } from 'react-native-paper';
import AsyncStorage from '@react-native-async-storage/async-storage';
import TaskItem from '../components/TaskItem';
import { loadTasks, saveTasks } from '../utils/Storage.js';

export default function HomeScreen() {
  const [tasks, setTasks] = useState([]);
  const [form, setForm] = useState({ title: '', description: '', dueDate: '', priority: 'Medium', status: 'Pending' });
  const [editIndex, setEditIndex] = useState(null);

  useEffect(() => {
    loadTasks().then(setTasks);
  }, []);

  useEffect(() => {
    saveTasks(tasks);
  }, [tasks]);

  const handleSave = () => {
    if (!form.title || !form.dueDate) return;

    const updated = [...tasks];
    if (editIndex !== null) {
      updated[editIndex] = form;
      setEditIndex(null);
    } else {
      updated.push(form);
    }

    setTasks(updated);
    setForm({ title: '', description: '', dueDate: '', priority: 'Medium', status: 'Pending' });
  };

  const handleDelete = (index) => {
    const updated = [...tasks];
    updated.splice(index, 1);
    setTasks(updated);
  };

  const handleEdit = (index) => {
    setForm(tasks[index]);
    setEditIndex(index);
  };

  return (
    <View style={styles.container}>
      <TextInput label="Title" value={form.title} onChangeText={(text) => setForm({ ...form, title: text })} style={styles.input} />
      <TextInput label="Description" value={form.description} onChangeText={(text) => setForm({ ...form, description: text })} style={styles.input} />
      <TextInput label="Due Date (YYYY-MM-DD)" value={form.dueDate} onChangeText={(text) => setForm({ ...form, dueDate: text })} style={styles.input} />
      <RadioButton.Group onValueChange={(value) => setForm({ ...form, priority: value })} value={form.priority}>
        <View style={styles.row}>
          <Text>Priority: </Text>
          <RadioButton.Item label="Low" value="Low" />
          <RadioButton.Item label="Medium" value="Medium" />
          <RadioButton.Item label="High" value="High" />
        </View>
      </RadioButton.Group>
      <RadioButton.Group onValueChange={(value) => setForm({ ...form, status: value })} value={form.status}>
        <View style={styles.row}>
          <Text>Status: </Text>
          <RadioButton.Item label="Pending" value="Pending" />
          <RadioButton.Item label="Completed" value="Completed" />
        </View>
      </RadioButton.Group>

      <Button mode="contained" onPress={handleSave} style={styles.button}>
        {editIndex !== null ? 'Update Task' : 'Add Task'}
      </Button>

      <FlatList
        data={tasks.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))}
        keyExtractor={(_, i) => i.toString()}
        renderItem={({ item, index }) => (
          <TaskItem task={item} onDelete={() => handleDelete(index)} onEdit={() => handleEdit(index)} />
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, flex: 1 },
  input: { marginBottom: 10 },
  button: { marginVertical: 10 },
  row: { flexDirection: 'row', alignItems: 'center' },
});
